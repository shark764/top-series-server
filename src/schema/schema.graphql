scalar DateTime

type Query {
  # Categories
  getCategories: [Category!]!
  getCategory(id: ID!): Category
  # Services
  getServices: [Service!]!
  getService(id: ID!): Service
  # Series
  getSeries(
    filter: String
    skip: Int
    take: Int
    orderBy: SerieOrderByInput
  ): TotalSerie
  getSerie(id: ID!): Serie
  # Actors
  getActors: [Actor!]!
  getActor(id: ID!): Actor
  # Casts
  getCasts: [Cast!]!
  getCast(id: ID!): Cast
}

type Mutation {
  # Categories
  addCategory(name: String!): Category!
  updateCategory(id: ID!, name: String!): Category
  removeCategory(id: ID!): Category
  # Services
  addService(name: String!): Service!
  updateService(id: ID!, name: String!): Service
  removeService(id: ID!): Service
  # Series
  addSerie(
    name: String!
    description: String
    imageUrl: String!
    categoryId: ID!
    serviceId: ID!
  ): Serie!
  updateSerie(
    id: ID!
    name: String!
    description: String
    imageUrl: String
    categoryId: ID!
    serviceId: ID!
  ): Serie!
  removeSerie(id: ID!): Serie
  # Actors
  addActor(name: String!, imageUrl: String!): Actor!
  updateActor(id: ID!, name: String!, imageUrl: String): Actor
  removeActor(id: ID!): Actor
  # Casts
  addCast(serieId: ID!, actorId: ID!): Cast
  updateCast(id: ID!, serieId: ID!, actorId: ID!): Cast
  removeCast(id: ID!): Cast
}

type Category {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  series: [Serie!]
}

type Service {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  series: [Serie!]
}

type Serie {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  description: String
  imageUrl: String!
  category: Category
  categoryId: ID!
  service: Service
  serviceId: ID!
  cast: [Cast!]
}

type Actor {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  imageUrl: String!
  cast: [Cast!]
}

type Cast {
  id: ID!
  serie: Serie!
  serieId: ID!
  actor: Actor!
  actorId: ID!
}

type Subscription {
  newCategory: Category
  updatedCategory: Category
  removedCategory: Category
  newService: Service
  updatedService: Service
  removedService: Service
  newSerie: Serie
  updatedSerie: Serie
  removedSerie: Serie
  newActor: Actor
  updatedActor: Actor
  removedActor: Actor
  newCast: Cast
  updatedCast: Cast
  removedCast: Cast
}

input SerieOrderByInput {
  name: Sort
  categoryId: Sort
  serviceId: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

type TotalSerie {
  series: [Serie!]
  count: Int!
}
